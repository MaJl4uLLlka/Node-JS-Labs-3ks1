9. Интернет - сеть на основе TCP/IP; 
всемирная система объединенных компьтерных сетей

10. Служба интернет - вид услуги оказываемой серверами сети Интернет
(DNS, SMTP/POP3/IMAP, WWW, FTP, Telnet, SSH,…)

11. Узел сети Интернет - устройство, имеющее IP-адрес и подключенное к
 сети Интернет (обычно к сети Интернет-провайдера). 
 Каждый узел характеризуется своей программно-аппаратной 
 платформой – аппаратурой и операционной системой.

12. клиент-серверное приложение - приложение (программа) с клиент-серверной
 архитектурой: приложение, состоящее из двух компонент – клиента и сервера;
 клиент и сервер взаимодействуют между собой в соответствии с заданными 
 правилами (спецификациями, протоколами); для взаимодействия между клиентом 
 и сервером в соответствии с правилами (спецификацией, протоколом) должно быть 
 установлено соединение; инициатором соединения всегда является клиент. 

13. сетевой протокол - набор правил и действий позволяющий осуществлять соединение
и обмен данными между двумя и более включенными в сеть устройствами.

14. свойства протокола  http
 -	версии HTTP/1.1 – действующий (текстовый)
-	два типа абонентов: клиент и сервер;
-	два типа сообщений: request и response;
-	от клиента к серверу – request;
-	от сервера к клиенту – response;
-	на один request всегда один response, иначе ошибка;
-	одному response всегда один request,  иначе ошибка; 
-	TCP-порты: 80, 443;
-	для адресации используется URI или URN;
-	поддерживается W3C, описан в нескольких RFC.

15. состав информации в пересылаемой http запросе 
- метод;
- URI;
- версия протокола (HTTP/1.1);
- заголовки (пары: имя/заголовок);
- параметры (пары: имя/заголовок);
- расширение.

16. состав информации в пересылаемой http ответе
-	версия протокола (HTTP/1.1);
-	код состояния (1xx, 2xx, 3xx, 4xx, 5xx);
-	пояснение к коду состояния;
-	заголовки (пары: имя/заголовок);
-	расширение.

17. web-приложение - клиент-серверное приложение в котором клиент взаимодействует 
с веб-сервером при помощи браузера

18. frontend - разработка клиента
    backend - разработка сервера

19. кросплатформенное приложение - приложение, способное работать на более чем одной
 программно-аппаратной (аппаратура + операционная система) платформе. 
 

20. общая схема web-приложения

21. основные технологии разработки серверных кросплатформенных приложений
Кроссплатформенность может быть достигнута различными способами: 
 1) на уровне компилятора (С, С++); 
 2) на уровне среды (фреймворка) исполнения (Java/JVM, C#/.NET CORE,
 JS/Node.js/V8). 

22. асинхронная операция - операция, в которой выполнение осуществляется в 2 фазы: 
1) заявка на исполнение; 
2) получение результата;

23. принцип выполнения асинхронного запроса с помощью xmlhttprequest & fetch

24. основное назначение сервера node.js
программная платформа для разработки  
серверных web-приложений на языке JS/V8.

25. основные свойства сервера node.js
-	основан на Chrome V8;
-	среда (контейнер) исполнения приложений на JavaScript;
-	поддерживает механизм асинхронности;
-	ориентирован на события;
-	однопоточный (код приложения исполняется только в одном потоке, 
один стек вызовов); обычно в серверах для каждого соединения создается свой поток, в Node.js все соединения обрабатываются в одном JS-потоке;
-	не блокирует выполнение кода при вводе/выводе (в файловой системе до 4х одновременно);
-	в состав Node.js входят инструменты: 
npm – пакетный менеджер; 
gyp - Python-генератор проектов; 
gtest – Google фреймворк для тестирования С++ приложений;   
-	использует библиотеки: 
V8 – библиотека V8 Engine,
libuv – библиотека для абстрагирования неблокирующих операций ввода/вывода (представляет собой обертку над epoll, kqueue, IOCP); 
llhttp – легковесный парсер http-сообщений (написан на C и не выполняет никаких системных вызовов); 
c-ares - библиотека для работы с DNS; 
OpenSSL – библиотека для криптографии; 
zlib – сжатие и распаковка.
 

19. основные свойства сервера node.js (смотри пункт 25)

20. npm - пакетный менеджер. Он используется для скачивания пакетов из облачного сервера npm,
 либо для загрузки пакетов на эти сервера.

21. назначение http-заголовка Content-Type
установка типа контента

22. назначение функции require
используется для загрузки модуля, присваиваемый переменной

23. Модуль node.js - блок кода, который может использоваться 
повторно в других модулях.

24. Node.js built-in modules 
встроенные модули

(Node.js Core modules)
http, fs, console

25. Какой модуль NODE.JS обеспечивает работу с протоколом HTTP?
http

26. Какой модуль NODE.JS обеспечивает работу с файловой системой?
fs